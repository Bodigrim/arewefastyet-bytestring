name: collect-perf
on:
  - push
  - pull_request
jobs:
  linux:
    name: collect-perf-${{ matrix.compiler }}
    runs-on: ubuntu-20.04
    timeout-minutes:
      60
    container:
      image: buildpack-deps:bionic
    continue-on-error: ${{ matrix.allow-failure }}
    strategy:
      matrix:
        include:
          - compiler: ghc-9.6.0.20230128
            compilerKind: ghc
            compilerVersion: 9.6.0.20230128
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.4.4
            compilerKind: ghc
            compilerVersion: 9.4.4
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.2.5
            compilerKind: ghc
            compilerVersion: 9.2.5
            setup-method: ghcup
            allow-failure: false
          - compiler: ghc-9.0.2
            compilerKind: ghc
            compilerVersion: 9.0.2
            setup-method: ghcup
            allow-failure: false
      fail-fast: true
    steps:
      - name: perf_event_paranoid
        run: |
          cat /proc/sys/kernel/perf_event_paranoid
          sysctl -w kernel.perf_event_paranoid=-1
          sh -c 'echo -1 >/proc/sys/kernel/perf_event_paranoid'
          cat /proc/sys/kernel/perf_event_paranoid
      - name: apt
        run: |
          apt-get update
          apt-get install -y --no-install-recommends gnupg ca-certificates dirmngr curl git software-properties-common libtinfo5
          mkdir -p "$HOME/.ghcup/bin"
          curl -sL https://downloads.haskell.org/ghcup/0.1.19.0/x86_64-linux-ghcup-0.1.19.0 > "$HOME/.ghcup/bin/ghcup"
          chmod a+x "$HOME/.ghcup/bin/ghcup"
          "$HOME/.ghcup/bin/ghcup" config add-release-channel https://raw.githubusercontent.com/haskell/ghcup-metadata/master/ghcup-prereleases-0.0.7.yaml;
          "$HOME/.ghcup/bin/ghcup" install ghc "$HCVER" || (cat "$HOME"/.ghcup/logs/*.* && false)
          "$HOME/.ghcup/bin/ghcup" install cabal 3.6.2.0 || (cat "$HOME"/.ghcup/logs/*.* && false)
          apt-get install -y --no-install-recommends libcap-dev
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: Set PATH and environment variables
        run: |
          echo "$HOME/.cabal/bin" >> $GITHUB_PATH
          echo "LANG=C.UTF-8" >> "$GITHUB_ENV"
          echo "CABAL_DIR=$HOME/.cabal" >> "$GITHUB_ENV"
          echo "CABAL_CONFIG=$HOME/.cabal/config" >> "$GITHUB_ENV"
          HCDIR=/opt/$HCKIND/$HCVER
          HC=$HOME/.ghcup/bin/$HCKIND-$HCVER
          echo "HC=$HC" >> "$GITHUB_ENV"
          echo "HCPKG=$HOME/.ghcup/bin/$HCKIND-pkg-$HCVER" >> "$GITHUB_ENV"
          echo "HADDOCK=$HOME/.ghcup/bin/haddock-$HCVER" >> "$GITHUB_ENV"
          echo "CABAL=$HOME/.ghcup/bin/cabal-3.6.2.0 -vnormal+nowrap" >> "$GITHUB_ENV"
          HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\d+)\.(\d+)\.(\d+)(\.(\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')
          echo "HCNUMVER=$HCNUMVER" >> "$GITHUB_ENV"
          echo "ARG_TESTS=--enable-tests" >> "$GITHUB_ENV"
          echo "ARG_BENCH=--enable-benchmarks" >> "$GITHUB_ENV"
          if [ $((HCNUMVER >= 90600)) -ne 0 ] ; then echo "HEADHACKAGE=true" >> "$GITHUB_ENV" ; else echo "HEADHACKAGE=false" >> "$GITHUB_ENV" ; fi
          echo "ARG_COMPILER=--$HCKIND --with-compiler=$HC" >> "$GITHUB_ENV"
          echo "GHCJSARITH=0" >> "$GITHUB_ENV"
        env:
          HCKIND: ${{ matrix.compilerKind }}
          HCNAME: ${{ matrix.compiler }}
          HCVER: ${{ matrix.compilerVersion }}
      - name: env
        run: |
          env
      - name: write cabal config
        run: |
          mkdir -p $CABAL_DIR
          cat >> $CABAL_CONFIG <<EOF
          remote-build-reporting: anonymous
          write-ghc-environment-files: never
          remote-repo-cache: $CABAL_DIR/packages
          logs-dir:          $CABAL_DIR/logs
          world-file:        $CABAL_DIR/world
          extra-prog-path:   $CABAL_DIR/bin
          symlink-bindir:    $CABAL_DIR/bin
          installdir:        $CABAL_DIR/bin
          build-summary:     $CABAL_DIR/logs/build.log
          store-dir:         $CABAL_DIR/store
          install-dirs user
            prefix: $CABAL_DIR
          repository hackage.haskell.org
            url: http://hackage.haskell.org/
          EOF
          if $HEADHACKAGE; then
          cat >> $CABAL_CONFIG <<EOF
          repository head.hackage.ghc.haskell.org
             url: https://ghc.gitlab.haskell.org/head.hackage/
             secure: True
             root-keys: 7541f32a4ccca4f97aea3b22f5e593ba2c0267546016b992dfadcd2fe944e55d
                        26021a13b401500c8eb2761ca95c61f2d625bfef951b939a8124ed12ecf07329
                        f76d08be13e9a61a377a85e2fb63f4c5435d40f8feb3e12eb05905edb8cdea89
             key-threshold: 3
          active-repositories: hackage.haskell.org, head.hackage.ghc.haskell.org:override
          EOF
          fi
          cat >> $CABAL_CONFIG <<EOF
          program-default-options
            ghc-options: $GHCJOBS +RTS -M3G -RTS
          EOF
          cat $CABAL_CONFIG
      - name: versions
        run: |
          $HC --version || true
          $HC --print-project-git-commit-id || true
          $CABAL --version || true
      - name: update cabal index
        run: |
          $CABAL v2-update -v
      - name: install cabal-plan
        run: |
          mkdir -p $HOME/.cabal/bin
          curl -sL https://github.com/haskell-hvr/cabal-plan/releases/download/v0.6.2.0/cabal-plan-0.6.2.0-x86_64-linux.xz > cabal-plan.xz
          echo 'de73600b1836d3f55e32d80385acc055fd97f60eaa0ab68a755302685f5d81bc  cabal-plan.xz' | sha256sum -c -
          xz -d < cabal-plan.xz > $HOME/.cabal/bin/cabal-plan
          rm -f cabal-plan.xz
          chmod a+x $HOME/.cabal/bin/cabal-plan
          cabal-plan --version
      - name: download stuff
        run: |
          $CABAL unpack bytestring-0.11.4.0
          sed -i 's/tasty-bench/tasty-perfbench/g' bytestring-0.11.4.0/bytestring.cabal
          curl -sL https://github.com/phadej/libperf/archive/refs/heads/master.zip > libperf.zip
          unzip libperf.zip
      - name: generate cabal.project
        run: |
          touch cabal.project
          echo "packages: bytestring-0.11.4.0" >> cabal.project
          echo "packages: libperf-master" >> cabal.project
          echo "packages: libperf-master/tasty-perfbench" >> cabal.project
          echo "allow-newer: tagged:template-haskell" >> cabal.project
          echo "allow-newer: *:base" >> cabal.project
          echo "constraints: unix >= 2.7" >> cabal.project
          cat cabal.project
      - name: dump install plan
        run: |
          $CABAL v2-build $ARG_COMPILER $ARG_TESTS $ARG_BENCH --dry-run all
          cabal-plan
      - name: cache
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-${{ matrix.compiler }}-${{ github.sha }}
          path: ~/.cabal/store
          restore-keys: ${{ runner.os }}-${{ matrix.compiler }}-
      - name: bench
        run: |
          $CABAL run bytestring-bench $ARG_COMPILER -- --csv bytestring-$HCVER.csv
      - uses: actions/upload-artifact@master
        with:
          name: bytestring-$HCVER.csv
          path: bytestring-$HCVER.csv
